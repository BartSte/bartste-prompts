import subprocess
from collections.abc import Callable
from threading import Thread
from typing import IO

from prompts._promptmaker import Prompt

Strategy = Callable[[Prompt, set[str]], list[str]]


class CommandRunner:
    """A class to run commands based on a prompt and file set.

    Attributes:
        prompt: The prompt used for command generation.
        files: The set of files to operate on.
        strategy: Optional strategy function to generate the command.
    """
    prompt: Prompt
    files: set[str]
    strategy: Strategy | None

    def __init__(self, prompt: Prompt, files: set[str] | None = None):
        """Initializes a CommandRunner instance.

        Args:
            prompt: The prompt used for generating commands.
            files: An optional set of file names. Defaults to an empty set.
        """
        self.prompt = prompt
        self.files = files or set()
        self.strategy = None

    def run(self) -> None:
        """Executes the command generated by the strategy function.

        Raises:
            ValueError: If no strategy is provided.
        """
        if not self.strategy:
            raise ValueError("No strategy provided")

        cmd: list[str] = self.strategy(self.prompt, self.files)
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            bufsize=1,
            universal_newlines=False,
        )
        stdout_reader: Thread = Thread(
            target=self.stream_reader, args=(process.stdout, "STDOUT")
        )
        stderr_reader: Thread = Thread(
            target=self.stream_reader, args=(process.stderr, "STDERR")
        )
        stdout_reader.start()
        stderr_reader.start()
        process.wait()
        stdout_reader.join()
        stderr_reader.join()

    def stream_reader(self, pipe: IO[bytes], name: str) -> None:
        """Reads lines from a given pipe and prints them with a prefix.

        Args:
            pipe: The pipe to read from.
            name: Identifier for the stream (e.g., STDOUT or STDERR).
        """
        for line in iter(pipe.readline, b""):
            print(f"{name}: {line.decode().rstrip()}")


class Strategies:
    """A collection of static methods for generating command strategies."""
    @staticmethod
    def aider(prompt: Prompt, files: set[str]) -> list[str]:
        """Generates the command arguments for the aider strategy.

        Args:
            prompt: The prompt to convert into a message.
            files: The set of file names to include in the command.

        Returns:
            A list of command line arguments.
        """
        return ["aider", "--message", str(prompt), *files]
